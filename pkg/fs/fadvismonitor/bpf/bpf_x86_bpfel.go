// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfCacheEventT struct {
	Pid       uint32
	Comm      [16]int8
	_         [4]byte
	PageCount uint64
	Timestamp uint64
}

type BpfCacheStatsT struct {
	TotalReadAttempts uint64
	CacheMisses       uint64
	ReadBatchCalls    uint64
	PageCacheAdds     uint64
}

type BpfFadviseArgsT struct {
	Fd     int32
	_      [4]byte
	Offset uint64
	Len    uint64
	Advice int32
	_      [4]byte
}

type BpfFadviseStatsT struct {
	TotalCalls       uint64
	SuccessCalls     uint64
	AdviceDontneed   uint64
	AdviceSequential uint64
	AdviceNormal     uint64
	AdviceRandom     uint64
	AdviceWillneed   uint64
	AdviceNoreuse    uint64
}

type BpfLruShrinkInfoT struct {
	NrScanned   uint64
	NrReclaimed uint64
	CallerPid   uint32
	CallerComm  [16]int8
	_           [4]byte
}

type BpfReclaimInfoT struct {
	Pid  uint32
	Comm [16]int8
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
}

// BpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	KprobeAddToPageCacheLru      *ebpf.ProgramSpec `ebpf:"kprobe_add_to_page_cache_lru"`
	KprobeFilemapGetReadBatch    *ebpf.ProgramSpec `ebpf:"kprobe_filemap_get_read_batch"`
	KprobeKsysFadvise6464        *ebpf.ProgramSpec `ebpf:"kprobe_ksys_fadvise64_64"`
	KretprobeKsysFadvise6464     *ebpf.ProgramSpec `ebpf:"kretprobe_ksys_fadvise64_64"`
	TraceDirectReclaimBegin      *ebpf.ProgramSpec `ebpf:"trace_direct_reclaim_begin"`
	TraceEnterFadvise64          *ebpf.ProgramSpec `ebpf:"trace_enter_fadvise64"`
	TraceExitFadvise64           *ebpf.ProgramSpec `ebpf:"trace_exit_fadvise64"`
	TraceFilemapGetReadBatch     *ebpf.ProgramSpec `ebpf:"trace_filemap_get_read_batch"`
	TraceLruShrinkInactive       *ebpf.ProgramSpec `ebpf:"trace_lru_shrink_inactive"`
	TraceMmFilemapAddToPageCache *ebpf.ProgramSpec `ebpf:"trace_mm_filemap_add_to_page_cache"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	CacheEventMap    *ebpf.MapSpec `ebpf:"cache_event_map"`
	CacheStatsMap    *ebpf.MapSpec `ebpf:"cache_stats_map"`
	DirectReclaimMap *ebpf.MapSpec `ebpf:"direct_reclaim_map"`
	Events           *ebpf.MapSpec `ebpf:"events"`
	FadviseArgsMap   *ebpf.MapSpec `ebpf:"fadvise_args_map"`
	FadviseStatsMap  *ebpf.MapSpec `ebpf:"fadvise_stats_map"`
	ShrinkStatsMap   *ebpf.MapSpec `ebpf:"shrink_stats_map"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	CacheEventMap    *ebpf.Map `ebpf:"cache_event_map"`
	CacheStatsMap    *ebpf.Map `ebpf:"cache_stats_map"`
	DirectReclaimMap *ebpf.Map `ebpf:"direct_reclaim_map"`
	Events           *ebpf.Map `ebpf:"events"`
	FadviseArgsMap   *ebpf.Map `ebpf:"fadvise_args_map"`
	FadviseStatsMap  *ebpf.Map `ebpf:"fadvise_stats_map"`
	ShrinkStatsMap   *ebpf.Map `ebpf:"shrink_stats_map"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.CacheEventMap,
		m.CacheStatsMap,
		m.DirectReclaimMap,
		m.Events,
		m.FadviseArgsMap,
		m.FadviseStatsMap,
		m.ShrinkStatsMap,
	)
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	KprobeAddToPageCacheLru      *ebpf.Program `ebpf:"kprobe_add_to_page_cache_lru"`
	KprobeFilemapGetReadBatch    *ebpf.Program `ebpf:"kprobe_filemap_get_read_batch"`
	KprobeKsysFadvise6464        *ebpf.Program `ebpf:"kprobe_ksys_fadvise64_64"`
	KretprobeKsysFadvise6464     *ebpf.Program `ebpf:"kretprobe_ksys_fadvise64_64"`
	TraceDirectReclaimBegin      *ebpf.Program `ebpf:"trace_direct_reclaim_begin"`
	TraceEnterFadvise64          *ebpf.Program `ebpf:"trace_enter_fadvise64"`
	TraceExitFadvise64           *ebpf.Program `ebpf:"trace_exit_fadvise64"`
	TraceFilemapGetReadBatch     *ebpf.Program `ebpf:"trace_filemap_get_read_batch"`
	TraceLruShrinkInactive       *ebpf.Program `ebpf:"trace_lru_shrink_inactive"`
	TraceMmFilemapAddToPageCache *ebpf.Program `ebpf:"trace_mm_filemap_add_to_page_cache"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeAddToPageCacheLru,
		p.KprobeFilemapGetReadBatch,
		p.KprobeKsysFadvise6464,
		p.KretprobeKsysFadvise6464,
		p.TraceDirectReclaimBegin,
		p.TraceEnterFadvise64,
		p.TraceExitFadvise64,
		p.TraceFilemapGetReadBatch,
		p.TraceLruShrinkInactive,
		p.TraceMmFilemapAddToPageCache,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
