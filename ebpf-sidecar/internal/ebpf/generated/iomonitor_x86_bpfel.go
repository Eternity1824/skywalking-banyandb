// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package generated

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type IomonitorCacheEventT struct {
	_         structs.HostLayout
	Pid       uint32
	Comm      [16]int8
	_         [4]byte
	PageCount uint64
	Timestamp uint64
}

type IomonitorCacheStatsT struct {
	_                 structs.HostLayout
	TotalReadAttempts uint64
	CacheMisses       uint64
	ReadBatchCalls    uint64
	PageCacheAdds     uint64
}

type IomonitorFadviseArgsT struct {
	_      structs.HostLayout
	Fd     int32
	_      [4]byte
	Offset uint64
	Len    uint64
	Advice int32
	_      [4]byte
}

type IomonitorFadviseStatsT struct {
	_                structs.HostLayout
	TotalCalls       uint64
	SuccessCalls     uint64
	AdviceDontneed   uint64
	AdviceSequential uint64
	AdviceNormal     uint64
	AdviceRandom     uint64
	AdviceWillneed   uint64
	AdviceNoreuse    uint64
}

type IomonitorLruShrinkInfoT struct {
	_           structs.HostLayout
	NrScanned   uint64
	NrReclaimed uint64
	CallerPid   uint32
	CallerComm  [16]int8
	_           [4]byte
}

type IomonitorReclaimInfoT struct {
	_    structs.HostLayout
	Pid  uint32
	Comm [16]int8
}

// LoadIomonitor returns the embedded CollectionSpec for Iomonitor.
func LoadIomonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IomonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Iomonitor: %w", err)
	}

	return spec, err
}

// LoadIomonitorObjects loads Iomonitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*IomonitorObjects
//	*IomonitorPrograms
//	*IomonitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadIomonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadIomonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// IomonitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type IomonitorSpecs struct {
	IomonitorProgramSpecs
	IomonitorMapSpecs
	IomonitorVariableSpecs
}

// IomonitorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type IomonitorProgramSpecs struct {
	FentryAddToPageCacheLru      *ebpf.ProgramSpec `ebpf:"fentry_add_to_page_cache_lru"`
	FentryFilemapGetReadBatch    *ebpf.ProgramSpec `ebpf:"fentry_filemap_get_read_batch"`
	FentryKsysFadvise6464        *ebpf.ProgramSpec `ebpf:"fentry_ksys_fadvise64_64"`
	FexitKsysFadvise6464         *ebpf.ProgramSpec `ebpf:"fexit_ksys_fadvise64_64"`
	KprobeAddToPageCacheLru      *ebpf.ProgramSpec `ebpf:"kprobe_add_to_page_cache_lru"`
	KprobeFilemapGetReadBatch    *ebpf.ProgramSpec `ebpf:"kprobe_filemap_get_read_batch"`
	KprobeKsysFadvise6464        *ebpf.ProgramSpec `ebpf:"kprobe_ksys_fadvise64_64"`
	KretprobeKsysFadvise6464     *ebpf.ProgramSpec `ebpf:"kretprobe_ksys_fadvise64_64"`
	TraceDirectReclaimBegin      *ebpf.ProgramSpec `ebpf:"trace_direct_reclaim_begin"`
	TraceEnterFadvise64          *ebpf.ProgramSpec `ebpf:"trace_enter_fadvise64"`
	TraceExitFadvise64           *ebpf.ProgramSpec `ebpf:"trace_exit_fadvise64"`
	TraceFilemapGetReadBatch     *ebpf.ProgramSpec `ebpf:"trace_filemap_get_read_batch"`
	TraceLruShrinkInactive       *ebpf.ProgramSpec `ebpf:"trace_lru_shrink_inactive"`
	TraceMmFilemapAddToPageCache *ebpf.ProgramSpec `ebpf:"trace_mm_filemap_add_to_page_cache"`
}

// IomonitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type IomonitorMapSpecs struct {
	CacheEventMap    *ebpf.MapSpec `ebpf:"cache_event_map"`
	CacheStatsMap    *ebpf.MapSpec `ebpf:"cache_stats_map"`
	DirectReclaimMap *ebpf.MapSpec `ebpf:"direct_reclaim_map"`
	Events           *ebpf.MapSpec `ebpf:"events"`
	FadviseArgsMap   *ebpf.MapSpec `ebpf:"fadvise_args_map"`
	FadviseStatsMap  *ebpf.MapSpec `ebpf:"fadvise_stats_map"`
	ShrinkStatsMap   *ebpf.MapSpec `ebpf:"shrink_stats_map"`
}

// IomonitorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type IomonitorVariableSpecs struct {
}

// IomonitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadIomonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type IomonitorObjects struct {
	IomonitorPrograms
	IomonitorMaps
	IomonitorVariables
}

func (o *IomonitorObjects) Close() error {
	return _IomonitorClose(
		&o.IomonitorPrograms,
		&o.IomonitorMaps,
	)
}

// IomonitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadIomonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type IomonitorMaps struct {
	CacheEventMap    *ebpf.Map `ebpf:"cache_event_map"`
	CacheStatsMap    *ebpf.Map `ebpf:"cache_stats_map"`
	DirectReclaimMap *ebpf.Map `ebpf:"direct_reclaim_map"`
	Events           *ebpf.Map `ebpf:"events"`
	FadviseArgsMap   *ebpf.Map `ebpf:"fadvise_args_map"`
	FadviseStatsMap  *ebpf.Map `ebpf:"fadvise_stats_map"`
	ShrinkStatsMap   *ebpf.Map `ebpf:"shrink_stats_map"`
}

func (m *IomonitorMaps) Close() error {
	return _IomonitorClose(
		m.CacheEventMap,
		m.CacheStatsMap,
		m.DirectReclaimMap,
		m.Events,
		m.FadviseArgsMap,
		m.FadviseStatsMap,
		m.ShrinkStatsMap,
	)
}

// IomonitorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadIomonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type IomonitorVariables struct {
}

// IomonitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadIomonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type IomonitorPrograms struct {
	FentryAddToPageCacheLru      *ebpf.Program `ebpf:"fentry_add_to_page_cache_lru"`
	FentryFilemapGetReadBatch    *ebpf.Program `ebpf:"fentry_filemap_get_read_batch"`
	FentryKsysFadvise6464        *ebpf.Program `ebpf:"fentry_ksys_fadvise64_64"`
	FexitKsysFadvise6464         *ebpf.Program `ebpf:"fexit_ksys_fadvise64_64"`
	KprobeAddToPageCacheLru      *ebpf.Program `ebpf:"kprobe_add_to_page_cache_lru"`
	KprobeFilemapGetReadBatch    *ebpf.Program `ebpf:"kprobe_filemap_get_read_batch"`
	KprobeKsysFadvise6464        *ebpf.Program `ebpf:"kprobe_ksys_fadvise64_64"`
	KretprobeKsysFadvise6464     *ebpf.Program `ebpf:"kretprobe_ksys_fadvise64_64"`
	TraceDirectReclaimBegin      *ebpf.Program `ebpf:"trace_direct_reclaim_begin"`
	TraceEnterFadvise64          *ebpf.Program `ebpf:"trace_enter_fadvise64"`
	TraceExitFadvise64           *ebpf.Program `ebpf:"trace_exit_fadvise64"`
	TraceFilemapGetReadBatch     *ebpf.Program `ebpf:"trace_filemap_get_read_batch"`
	TraceLruShrinkInactive       *ebpf.Program `ebpf:"trace_lru_shrink_inactive"`
	TraceMmFilemapAddToPageCache *ebpf.Program `ebpf:"trace_mm_filemap_add_to_page_cache"`
}

func (p *IomonitorPrograms) Close() error {
	return _IomonitorClose(
		p.FentryAddToPageCacheLru,
		p.FentryFilemapGetReadBatch,
		p.FentryKsysFadvise6464,
		p.FexitKsysFadvise6464,
		p.KprobeAddToPageCacheLru,
		p.KprobeFilemapGetReadBatch,
		p.KprobeKsysFadvise6464,
		p.KretprobeKsysFadvise6464,
		p.TraceDirectReclaimBegin,
		p.TraceEnterFadvise64,
		p.TraceExitFadvise64,
		p.TraceFilemapGetReadBatch,
		p.TraceLruShrinkInactive,
		p.TraceMmFilemapAddToPageCache,
	)
}

func _IomonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed iomonitor_x86_bpfel.o
var _IomonitorBytes []byte
